name: Plan

on:
  workflow_run:
    workflows:
      - "Plan (pre)"
    types:
      - completed
  workflow_dispatch:

jobs:
  prepare:
    if: (github.event_name == 'workflow_dispatch' &&
        github.ref_name == github.event.repository.default_branch &&
        github.event.repository.is_template == false) ||
        (github.event_name == 'workflow_run' &&
        github.event.workflow_run.conclusion == 'success')
    permissions:
      actions: read
      contents: read
      statuses: write
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      workspaces: ${{ steps.workspaces.outputs.this }}
      repository: ${{ steps.github.outputs.repository }}
      sha: ${{ steps.github.outputs.sha }}
      number: ${{ steps.github.outputs.number }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Find repository and sha to checkout
        id: github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ '${{ github.event_name }}' == 'workflow_dispatch' ]]; then
            repository='${{ github.repository }}'
            sha='${{ github.sha }}'
          elif [[ '${{ github.event_name }}' == 'workflow_run' ]]; then
            repository='${{ github.event.workflow_run.head_repository.full_name }}'
            sha='${{ github.event.workflow_run.head_commit.id }}'
            number="$(gh api '/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}' --jq '.pull_requests[0].number')"
          fi
          echo "::set-output name=repository::$repository"
          echo "::set-output name=sha::$sha"
          echo "::set-output name=number::$number"
      - run: sha=${{ steps.github.outputs.sha }}
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh api 'repos/${{ github.repository }}/statuses/${{ steps.github.outputs.sha }}' -f context='Plan' -f state='pending' -f target_url='${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: ${{ steps.github.outputs.repository }}
          ref: ${{ steps.github.outputs.sha }}
      - name: Discover workspaces
        id: workspaces
        run: echo "::set-output name=this::$(ls github | jq --raw-input '[.]' | jq -sc add)"
  plan:
    needs: [prepare]
    if: needs.prepare.outputs.workspaces != ''
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        workspace: ${{ fromJson(needs.prepare.outputs.workspaces) }}
    name: Plan
    runs-on: ubuntu-latest
    env:
      TF_IN_AUTOMATION: 1
      TF_INPUT: 0
      TF_WORKSPACE: ${{ matrix.workspace }}
      AWS_ACCESS_KEY_ID: ${{ secrets.TF_RO_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_RO_AWS_SECRET_ACCESS_KEY }}
      GITHUB_APP_ID: ${{ secrets[format('TF_RO_GITHUB_APP_ID_{0}', matrix.workspace)] }}
      GITHUB_APP_INSTALLATION_ID: ${{ secrets[format('TF_RO_GITHUB_APP_INSTALLATION_ID_{0}', matrix.workspace)] }}
      GITHUB_APP_PEM_FILE: ${{ secrets[format('TF_RO_GITHUB_APP_PEM_FILE_{0}', matrix.workspace)] }}
      TF_VAR_write_delay_ms: 300
    defaults:
      run:
        shell: bash
        working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: ${{ needs.prepare.outputs.repository }}
          ref: ${{ needs.prepare.outputs.sha }}
      - name: Setup terraform
        uses: hashicorp/setup-terraform@3d8debd658c92063839bc97da5c2427100420dec # v1.3.2
        with:
          terraform_version: 1.1.4
      - name: Initialize terraform
        run: terraform init
      - name: Check terraform lock
        if: github.event_name == 'workflow_run'
        run: git diff --exit-code .terraform.lock.hcl
      - name: Format terraform
        run: terraform fmt -check
      - name: Validate terraform
        run: terraform validate -no-color
      - name: Retrieve targets from config
        id: target
        run: echo "::set-output name=this::$(jq -r 'split(" ")[:-1] | map("-target=github_\(sub(".json$"; "")).this") | join(" ")' <<< '"'"$(ls | tr '\n' ' ')"'"')"
        working-directory: github/${{ env.TF_WORKSPACE }}
      - name: Plan terraform
        id: plan
        run: terraform plan ${{ steps.target.outputs.this }} -refresh=false -lock=false -out=${{ env.TF_WORKSPACE }}.tfplan -no-color
      - name: Upload terraform plan
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.TF_WORKSPACE }}_${{ needs.prepare.outputs.sha }}.tfplan
          path: terraform/${{ env.TF_WORKSPACE }}.tfplan
          if-no-files-found: error
          retention-days: 90
  comment:
    needs: [prepare, plan]
    if: github.event_name == 'workflow_run'
    permissions:
      contents: read
      pull-requests: write
    name: Comment
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.TF_RO_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_RO_AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        shell: bash
        working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: ${{ needs.prepare.outputs.repository }}
          ref: ${{ needs.prepare.outputs.sha }}
      - name: Setup terraform
        uses: hashicorp/setup-terraform@3d8debd658c92063839bc97da5c2427100420dec # v1.3.2
        with:
          terraform_version: 1.1.4
          terraform_wrapper: false
      - name: Initialize terraform
        run: terraform init
      - name: Download terraform plans
        uses: actions/download-artifact@v2
        with:
          path: terraform
      - name: Show terraform plans
        run: |
          echo 'COMMENT<<EOF' >> $GITHUB_ENV
          for plan in $(find . -type f -name '*.tfplan'); do
            echo "<details><summary>$(basename "$plan" '.tfplan')</summary>" >> $GITHUB_ENV
            echo '' >> $GITHUB_ENV
            echo '```' >> $GITHUB_ENV
            echo "$(terraform show -no-color "$plan" 2>&1)" >> $GITHUB_ENV
            echo '```' >> $GITHUB_ENV
            echo '' >> $GITHUB_ENV
            echo '</details>' >> $GITHUB_ENV
          done
          echo 'EOF' >> $GITHUB_ENV
      - name: Comment on pull request
        uses: marocchino/sticky-pull-request-comment@39c5b5dc7717447d0cba270cd115037d32d28443 # v2.2.0
        with:
          number: ${{ needs.prepare.outputs.number }}
          message: |
            Before merge, verify that all the following plans are correct. They will be applied as-is after the merge.

            #### Terraform plans
            ${{ env.COMMENT }}
