name: Apply

on:
  push:
  workflow_dispatch:

jobs:
  prepare:
    if: github.ref_name == github.event.repository.default_branch &&
        github.event.repository.is_template == false
    permissions:
      contents: read
      issues: read
      pull-requests: read
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      workspaces: ${{ steps.workspaces.outputs.this }}
      sha: ${{ steps.sha.outputs.this }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Discover workspaces
        id: workspaces
        run: echo "::set-output name=this::$(ls github | jq --raw-input '[.]' | jq -sc add)"
      - name: Find pull request number
        id: pull_request
        if: github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: protocol/github-api-action-library/find-content-by-query@v1
        with:
          query: ${{ github.sha }}
      - name: Find sha for plan
        id: sha
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ '${{ github.event_name }}' == 'push' ]]; then
            number="$(jq -r '.[0].number // ""' <<< '${{ steps.pull_request.outputs.issues-or-pull-requests }}')"
            if [[ ! -z "$number" ]]; then
              sha="$(gh pr view "$number" --json commits --jq '.commits[-1].oid')"
            fi
          else
            sha='${{ github.sha }}'
          fi
          echo "::set-output name=this::$sha"
  apply:
    needs: [prepare]
    if: needs.prepare.outputs.sha != '' && needs.prepare.outputs.workspaces != ''
    permissions:
      actions: read
      contents: read
    strategy:
      fail-fast: false
      matrix:
        workspace: ${{ fromJson(needs.prepare.outputs.workspaces) }}
    name: Apply
    runs-on: ubuntu-latest
    env:
      TF_IN_AUTOMATION: 1
      TF_INPUT: 0
      TF_WORKSPACE: ${{ matrix.workspace }}
      AWS_ACCESS_KEY_ID: ${{ secrets.TF_RW_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_RW_AWS_SECRET_ACCESS_KEY }}
      GITHUB_APP_ID: ${{ secrets[format('TF_RW_GITHUB_APP_ID_{0}', matrix.workspace)] }}
      GITHUB_APP_INSTALLATION_ID: ${{ secrets[format('TF_RW_GITHUB_APP_INSTALLATION_ID_{0}', matrix.workspace)] }}
      GITHUB_APP_PEM_FILE: ${{ secrets[format('TF_RW_GITHUB_APP_PEM_FILE_{0}', matrix.workspace)] }}
      TF_VAR_write_delay_ms: 300
    defaults:
      run:
        shell: bash
        working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup terraform
        uses: hashicorp/setup-terraform@3d8debd658c92063839bc97da5c2427100420dec # v1.3.2
        with:
          terraform_version: 1.1.4
      - name: Initialize terraform
        run: terraform init
      - name: Retrieve targets from config
        id: target
        run: echo "::set-output name=this::$(jq -r 'split(" ")[:-1] | map("-target=github_\(sub(".json$"; "")).this") | join(" ")' <<< '"'"$(ls | tr '\n' ' ')"'"')"
        working-directory: github/${{ env.TF_WORKSPACE }}
      - name: Terraform Plan Download
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh run download -n ${{ env.TF_WORKSPACE }}_${{ needs.prepare.outputs.sha }}.tfplan --repo ${{ github.repository }}
      - name: Terraform Apply
        run: terraform apply -auto-approve -lock-timeout=0s -no-color ${{ env.TF_WORKSPACE }}.tfplan
